;; --- Package Initialization ---
;; Initialize the package manager and add MELPA and GNU ELPA repositories
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(unless (bound-and-true-p package--initialized)
  (package-initialize))

;; Bootstrap 'use-package'
;; Ensure the "use-package" package is installed, which simplifies the management of other packages
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(setq use-package-always-ensure t) ;; Automatically install packages defined with use-package

;; --- TRAMP Optimization ---
;; Configure TRAMP to use SSH as the default method
(setq tramp-default-method "ssh")
(setq tramp-ssh-controlmaster-options
      "-o ControlMaster=auto -o ControlPersist=yes -o ControlPath='~/.ssh/control-%%r@%%h:%%p'")
(setq tramp-copy-size-limit 1000000) ;; Increase limit for file copy

;; --- Line Truncation ---
;; Enable line truncation (useful to avoid line wrapping in some views)
(set-default 'truncate-lines t)

;; --- Auto-mode Settings ---
;; Associate specific file types with major modes
(add-to-list 'auto-mode-alist '(".*/bash/rc\\'" . sh-mode))       ;; Bash rc files -> sh-mode
(add-to-list 'auto-mode-alist '(".*/bash/profile\\'" . sh-mode))  ;; Bash profile files -> sh-mode
(add-to-list 'auto-mode-alist '(".*\\.tex\\.mustache\\'" . latex-mode)) ;; LaTeX Mustache files -> latex-mode
(add-to-list 'auto-mode-alist '(".*\\.tex\\.jinja2\\'" . latex-mode))  ;; LaTeX Jinja2 files -> latex-mode
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))    ;; Python files -> python-mode

;; --- General Python Configuration ---
;; Basic configuration for Python, such as indentation and using spaces instead of tabs
(use-package python-mode
  :hook (python-mode . (lambda ()
                         (setq python-indent-offset 4
                               tab-width 4
                               indent-tabs-mode nil))))

;; --- LSP Configuration ---
;; Enable LSP (Language Server Protocol) for Python with Pyright as the server
(use-package lsp-mode
  :hook (python-mode . lsp)  ;; Enable LSP when python-mode starts
  :custom
  (lsp-pyright-multi-root nil)  ;; Optimization for Pyright (disables multi-root support)
  (lsp-enable-snippet nil))     ;; Disable automatic snippets provided by LSP

(use-package lsp-pyright
  :after lsp-mode
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))  ;; Use Pyright as the LSP server

;; --- Flycheck ---
;; Enable Flycheck for syntax checking
(use-package flycheck
  :hook (python-mode . flycheck-mode))

;; --- Black Formatter ---
;; Enable Black for automatic code formatting in Python
(use-package blacken
  :hook (python-mode . blacken-mode))

;; --- isort ---
;; Enable isort for automatically sorting Python imports
(use-package isortify
  :hook (python-mode . isortify-mode))

;; Format Python code with Black before saving
(add-hook 'python-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'blacken-buffer nil t)))
;; Automatically format code with isort before each save
(add-hook 'python-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'isortify-buffer nil t)))

;; --- Appearance and Utility ---
;; Globally display line numbers
(global-display-line-numbers-mode t)

;; ANSI Colors in Buffers
;; Add ANSI colors to compilation buffers and shells
(use-package ansi-color
  :config
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point-max)))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

  (defun my-shell-mode-hook ()
    (ansi-color-for-comint-mode-on))
  (add-hook 'shell-mode-hook 'my-shell-mode-hook))

;; --- LaTeX Configuration ---
;; Configure AUCTeX for editing LaTeX files with PDF output as default
(use-package tex
  :ensure auctex
  :hook (latex-mode . (lambda ()
                        (setq TeX-PDF-mode t))))

;; --- Git Integration ---
;; Add Magit for Git operations
(use-package magit
  :commands magit-status
  :config
  (global-set-key (kbd "C-x g") 'magit-status))

;; --- Keybinding Discovery ---
;; Add which-key to help discover keybindings
(use-package which-key
  :config
  (which-key-mode))
